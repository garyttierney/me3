on:
  release:
    types:
      - released
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
name: Publishing
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.release.name || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  publish-installer:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build-installer
      - test-windows
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      attestations: write
      contents: write
      actions: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: me3-artifacts
      - name: Display structure of downloaded files
        run: ls -R
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        id: attest-installer
        with:
          subject-path: |
            me3_installer.exe
            me3-windows-amd64.zip
            me3-linux-amd64.tar.gz

      - uses: actions/attest-sbom@bd218ad0dbcb3e146bd073d1d9c6d78e08aa8a0b # v2.4.0
        with:
          subject-path: "target/x86_64-pc-windows-msvc/release/me3_mod_host.dll"
          sbom-path: "crates/mod-host/me3-mod-host_x86_64-pc-windows-msvc.cdx.json"

      - uses: actions/attest-sbom@bd218ad0dbcb3e146bd073d1d9c6d78e08aa8a0b # v2.4.0
        with:
          subject-path: "target/x86_64-pc-windows-msvc/release/me3-launcher.exe"
          sbom-path: "crates/launcher/me3-launcher_x86_64-pc-windows-msvc.cdx.json"

      - uses: actions/attest-sbom@bd218ad0dbcb3e146bd073d1d9c6d78e08aa8a0b # v2.4.0
        with:
          subject-path: "target/x86_64-pc-windows-msvc/release/me3.exe"
          sbom-path: "crates/cli/me3-cli_x86_64-pc-windows-msvc.cdx.json"

      - uses: actions/attest-sbom@bd218ad0dbcb3e146bd073d1d9c6d78e08aa8a0b # v2.4.0
        with:
          subject-path: "target/x86_64-unknown-linux-musl/release/me3"
          sbom-path: "crates/cli/me3-cli_x86_64-unknown-linux-musl.cdx.json"
      - uses: taiki-e/install-action@9ba3ac3fd006a70c6e186a683577abc1ccf0ff3a # v2.54.0
        with:
          tool: git-cliff
      - run: |
          set -euxo pipefail
          version="${{ needs.build-installer.outputs.version }}"
          version=${version%"-prerelease"}
          v=(${version//./ })
          ((v[1]--))
          prev_tag_name="v${v[0]}.${v[1]}.${v[2]}"
          TAG="v${{ needs.build-installer.outputs.version }}"
          echo "RELEASE_TAG=$TAG" >> "$GITHUB_ENV"
          echo "RELEASE_IS_PRERELEASE=true" >> "$GITHUB_ENV"

          if gh release view "$TAG" -R garyttierney/me3 ; then
              gh release delete "$TAG" -R garyttierney/me3 -y --cleanup-tag
              sleep 15s
          fi

          export CHANGES=$(git cliff --strip all "$prev_tag_name..HEAD")
          release_notes=$(./releng/bin/release-notes "$TAG")

          gh release create "$TAG" -p -n "$release_notes" --target main
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

      - run: |
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> "$GITHUB_ENV"
          echo "RELEASE_IS_PRERELEASE=false" >> "$GITHUB_ENV"
        if: github.event_name == 'release'

      - run: |
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "is_prerelease=$RELEASE_IS_PRERELEASE" >> "$GITHUB_OUTPUT"
        id: collect-release-info

      - name: Update tag in Linux installer
        run: |
          sed -i "s/INSTALLER_VERSION=.*/INSTALLER_VERSION=${{ steps.collect-release-info.outputs.release_tag }}/" installer.sh

      - name: Copy SLSA provenance for release upload
        run: |
          mv "$BUNDLE_PATH" attestations.intoto.jsonl
        env:
          BUNDLE_PATH: ${{ steps.attest-installer.outputs.bundle-path }}

      - name: Upload installer to release
        run: >-
          gh release upload --clobber -R garyttierney/me3 "${{ steps.collect-release-info.outputs.release_tag }}"
          'me3_installer.exe#me3_installer.exe (Installer for Windows)'
          'installer.sh#installer.sh (Installer for Linux)'
          'me3-windows-amd64.zip#me3-windows-amd64.zip (Portable distribution for Windows)'
          'me3-linux-amd64.tar.gz#me3-linux-amd64.tar.gz (Portable distribution for LInux)'
          attestations.intoto.jsonl
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Setup Sentry CLI
        uses: matbour/setup-sentry-cli@3e938c54b3018bdd019973689ef984e033b0454b # v2.0.0
        with:
          version: latest
          token: ${{ secrets.SENTRY_AUTH_TOKEN }} # from GitHub secrets
          organization: modengine
          project: me3

      - name: Create Sentry release
        uses: getsentry/action-release@db19a8438b9ff55beba8fbb40fdce2571e85bbd9 # v3.1.2
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: modengine
          SENTRY_PROJECT: me3
        with:
          release: "${{ needs.build-installer.outputs.version }}"
          finalize: "${{ steps.collect-release-info.outputs.is_prerelease == 'false' }}"

      - name: Upload debug symbols to sentry
        run: |
          mkdir sentry-debug-files
          cp target/x86_64-pc-windows-msvc/release/*.exe target/x86_64-pc-windows-msvc/release/*.pdb sentry-debug-files/
          sentry-cli debug-files upload --include-sources -o modengine -p me3 sentry-debug-files/
  build-installer:
    name: Installer
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version}}
    permissions:
      contents: read
      actions: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly
          targets: x86_64-pc-windows-msvc,x86_64-unknown-linux-musl
      - uses: ./.github/actions/setup-windows-toolchain
      - name: Install musl-tools
        run: sudo apt-get install --yes musl-tools
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
        with:
          shared-key: me3-build
          save-if: ${{ github.event_name == 'push' }}
      - run: |
          cargo build --target x86_64-pc-windows-msvc --all --release --features=sentry
          cargo build --target x86_64-unknown-linux-musl -p me3-cli --release --features=sentry
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      - run: |
          ls target/
          ls target/release
          ls target/x86_64-pc-windows-msvc/release

      - name: Install NSIS
        run: |
          sudo apt-get install nsis

      - run: |
          echo "version=$(cargo pkgid -p me3-mod-host | cut -d '@' -f2)" >> $GITHUB_OUTPUT
        id: get_version
        shell: bash

      - name: Build installer
        run: makensis -DTARGET_DIR="${{ github.workspace }}/target/x86_64-pc-windows-msvc/release/" -DVERSION=${{ steps.get_version.outputs.version }} installer.nsi "-XOutFile me3_installer.exe"

      - name: Create distributions
        run: |
          make me3-windows-amd64.zip me3-linux-amd64.tar.gz

      - uses: taiki-e/install-action@9ba3ac3fd006a70c6e186a683577abc1ccf0ff3a # v2.54.0
        with:
          tool: cargo-cyclonedx

      - name: Generate SBOMs
        run: |
          cargo cyclonedx --target=x86_64-pc-windows-msvc --target-in-filename --format=json
          cargo cyclonedx --target=x86_64-unknown-linux-musl --target-in-filename --format=json

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: me3-artifacts
          path: |
            me3_installer.exe
            target/x86_64-pc-windows-msvc/release/me3_mod_host.dll
            target/x86_64-pc-windows-msvc/release/me3_mod_host.pdb
            target/x86_64-pc-windows-msvc/release/me3-launcher.exe
            target/x86_64-pc-windows-msvc/release/me3_launcher.pdb
            target/x86_64-pc-windows-msvc/release/me3.exe
            target/x86_64-pc-windows-msvc/release/me3.pdb
            target/x86_64-unknown-linux-musl/release/me3
            me3-windows-amd64.zip
            me3-linux-amd64.tar.gz
            crates/**/*.cdx.json
            installer.sh

  test-windows:
    name: End-to-end tests (Windows)
    needs:
      - build-installer
    runs-on: windows-latest
    permissions:
      actions: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Download installer
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: me3-artifacts
      - run: ls -R
      - run: ./me3_installer.exe /S

      - run: |
          Import-Module "$env:ChocolateyInstall/helpers/chocolateyInstaller.psm1"
          refreshenv
          me3.exe info
          me3.exe profile create -g er my-new-profile
          me3.exe profile list
          me3.exe profile show my-new-profile
        shell: pwsh
