# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "garyttierney"
repo = "me3"

[changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.
<!-- markdown-link-check-disable -->
<!-- ignore lint rules that are often triggered by content generated from commits / git-cliff -->
<!-- markdownlint-disable line-length no-bare-urls ul-style emphasis-style -->
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{%- if not version %}
## [unreleased]
{% else -%}
## me3 - [{{ version }}](https://github.com/garyttierney/me3/releases/{{version}}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% endif -%}

{% macro body(commit) -%}
{% if commit.body %}\
{{commit.body|trim}}\
{% elif "\n" in commit.message -%}\
\n{{ commit.message | trim | split(pat="\n") | slice(start=1) | join(sep="\n") | trim }}
{% endif -%}\
{% endmacro -%}

{% macro commit(commit) -%}
- [{{ commit.id | truncate(length=7, end="") }}]({{ "https://github.com/garyttierney/me3/commit/" ~ commit.id }}) \
  {% if commit.scope %} \
  *({{commit.scope | default(value = "uncategorized") | lower }})* \
  {% endif %}\
  {{ commit.message | upper_first | trim | split(pat="\n") | first }}\
  {% if commit.remote.pr_number %} in [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}){%- endif %}\
{%- if commit.breaking %} [**breaking**]{% endif %}
{% set body = self::body(commit=commit) %}\
{%- if body %}\n\n{{ body | indent(prefix="  > ", first=true, blank=false) }}\
{%- endif %}
{% if commit.footers %}
{%- for footer in commit.footers %}\n
{%- if footer.token != "Signed-off-by" and footer.token != "Co-authored-by" %}
  >
{{ footer.token | indent(prefix="  > ", first=true, blank=true) }}
{{- footer.separator }}
{{- footer.value| indent(prefix="  > ", first=false, blank=true)  }}
{%- endif %}
{%- endfor %}
{%- endif %}
{% endmacro -%}

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim | upper_first }}
{% for commit in commits | unique(attribute="message") | filter(attribute="scope") | sort(attribute="scope") %}
{{ self::commit(commit=commit) }}
{%- endfor -%}
{% for commit in commits | unique(attribute="message") %}
{%- if not commit.scope %}
{{ self::commit(commit=commit) }}
{%- endif -%}
{%- endfor -%}
{%- endfor %}

{%- macro remote_url() -%}
https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
{% endmacro %}
"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
  { pattern = '>\n  >', replace = "  >" },
  # Replace the placeholder <REPO> with a URL.
  #{ pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
commit_preprocessors = [
  { pattern = "feat\\(docs\\)", replace = "docs\\(feature\\)" },
  { pattern = 'feat: ootb ux improvements', replace = "feat: improvements to out of the box UX\n\nAdds start menu entries and a 'mods' folder for each profile where mods can be placed for an out-of-the box launch experience." },
  { pattern = '[\s]*\(#[0-9]+\)', replace = "" },
  { pattern = "^Fix ", replace = "fix: " },
  # { pattern = "\n", replace = "\n\n" },
]
commit_parsers = [
  { message = "^fix: spelling", skip = true },
  { message = "^^ci|^fix\\(ci\\)|^feat\\(ci\\)", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^[rR]elease", skip = true },                                                    # spellchecker:disable-line
  { message = "^chore", skip = true },
  { message = "^[sS]pelling", skip = true },
  { message = "^Update CHANGELOG", skip = true },
  { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
  { message = ".*", group = "<!-- 10 -->Other" },
  { field = "github.pr_labels", pattern = "^no-changelog", skip = true },
  { field = "github.pr_labels", pattern = "^bugfix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { field = "github.pr_labels", pattern = "^feat", group = "<!-- 0 --> 🚀 Features" },
] # Prevent commits that are breaking from being excluded by commit parsers.

# An array of regex based parsers for extracting data from the commit message.protect_breaking_commits = false
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = [{ pattern = "#(\\d+)", href = "https://github.com/garyttierney/me3/issues/$1" }]
# Include only the tags that belong to the current branch.
use_branch_tags = false

# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
ignore_tags = '^(.*prerelease|0.5.0)$'
# Process submodules commits
recurse_submodules = false
